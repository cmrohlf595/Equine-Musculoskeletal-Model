clear all; close all;
 
global E j k CDE_p3 CDE_p2 LDE_hi LDE_mid LDE_lo ECR_c ECR_e eco_hro eco_lro FCR FCU_h FCU_u UL_mc3 UL_ac DDF_u DDF_r DDF_h SDF_lat SDF_med act vm lm0 F0 lt0
 
prompt = 'Do You Want to Save Data? Y(1) or N(0)';
 
dlgtitle = 'Save Data';
dims = [1 50];
dlgbox=inputdlg(prompt, dlgtitle, dims);
Save=str2num(dlgbox{1});
 
prompt = 'Data is from which horse Pebbles (1) Ernie (2) Everclear (3) Kato (4)?';
dlgtitle = 'Horse';
dims = [1 50];
dlgbox=inputdlg(prompt, dlgtitle, dims);
Horse=str2num(dlgbox{1});
 
%Select data prep file for model Trial name, phase (T/L), jump lead (L/R),
%stance time.
 
hmsg=msgbox('Read in text prep file for model outputs');
uiwait(hmsg);
[evnts_name,evnts_path,filtindx] = uigetfile({'*.txt','Text Files (*.*)'},'Load "Model_Outputs', 'MultiSelect', 'off');
if (filtindx == 0) return;
end
 
events_filename=strcat(evnts_path,evnts_name);
 
fid3 = fopen(events_filename, 'r');
eventsblockwheader =textscan(fid3, '%s%s%s%s', 'delimiter', '\t');
numrows=size(eventsblockwheader{1},1);
for w=1:4
    eventsblock{w} =eventsblockwheader{w}(2:numrows);
end
    fclose(fid3);
    cd(evnts_path);
 
trialheaders=eventsblock{1};
lng=size(trialheaders,1);
for rr=1:length(eventsblock)-1;
    if rr<3
    Q(:,rr)=char(eventsblock{rr+1});
    elseif rr==3
    P(:,1)=str2num(char(eventsblock{4}));
    end
end
 
 
for i=1:size(P,1)
    
  %Read in file data
  
    char(trialheaders(i))
    
    Input=importdata(strcat(char(trialheaders(i)),'_MuscleAnalysis_TendonLength','.sto'));
    
    for n=1:size(Input.data,1)
        for o=1:size(Input.data,2)
            E(n,o)=Input.data(n,o);
        end
    end
    
    Input2=importdata(strcat(char(trialheaders(i)),'_MuscleAnalysis_TendonForce','.sto'));
    
    for n=1:size(Input2.data,1)
        for o=1:size(Input2.data,2)
            H(n,o)=Input2.data(n,o);
        end
    end
    
    time=(E(:,1));
    
 
    
    %Muscle-tendon units
    CDE_p3=(E(:,2));
    CDE_p2=(E(:,3));
    LDE_hi=(E(:,4));
    LDE_mid=(E(:,5));
    LDE_lo=(E(:,6));
    ECR_c=(E(:,7));
    ECR_e=(E(:,8));
    eco_hro=(E(:,9));
    eco_lro=(E(:,10));
    FCR=(E(:,11)); 
    FCU_h=(E(:,12));
    FCU_u=(E(:,13));
    UL_mc3=(E(:,14));
    UL_ac=(E(:,15));
    DDF_u=(E(:,16));
    DDF_h=(E(:,17));
    DDF_r=(E(:,18));
    SDF_lat=(E(:,19));
    SDF_med=(E(:,20));
    
    %Ligaments
    ICL=(H(:,21));
    SCL_lat=(H(:,22));
    SCL_med=(H(:,23));
    SUSP_lat=(H(:,24));
    SUSP_med=(H(:,25));
    EB_lat=(H(:,26));
    EB_med=(H(:,27));
    CollFet_latD=(H(:,28));
    CollFet_latS=(H(:,29));
    CollFet_medD=(H(:,30)); 
    CollFet_medS=(H(:,31));
    CollPSes_lat=(H(:,32));
    CollPSes_med=(H(:,33));
    PsesCr_lat=(H(:,34));
    PsesCr_med=(H(:,35));
    PsesSht_lat=(H(:,36));
    PsesSht_med=(H(:,37));
    PsesO_lat=(H(:,38));
    PsesO_mid=(H(:,39));
    PsesO_med=(H(:,40));
    PsesStr=(H(:,41));
    CollPIP_lat=(H(:,42)); 
    CollPIP_med=(H(:,43));
    PIPAx_lat=(H(:,44));
    PIPAx_med=(H(:,45));
    PIPAbax_latS=(H(:,46));
    PIPAbax_medS=(H(:,47));
    PIPAbax_latD=(H(:,48));
    PIPAbax_medD=(H(:,49));
    CollDIP_lat=(H(:,50));
    CollDIP_med=(H(:,51));
    CollDSes_lat=(H(:,52));
    CollDSes_med=(H(:,53));
    Imp=(H(:,54));
    
%Choose standing lengths/forces based on horse
    
if Horse==1
    lms=[0.0259200000000000,0.0259200000000000,0.0105413489872546,0.0105475586808831,0.0105494339034976,0.0220342386101555,0.0221807291028362,0.00608029084828271,0.00607851347057970,0.0338560892540413,0.00455004827690842,0.00451504809276065,0.00408450863738298,0.00415413029510094,0.243996910582541,0.400746481790191,0.170640609863110,0.385525281223612,0.385525281223612];
    MFs=[0,0,0.0281758333170918,0.0310417801731207,0.0235690610806430,2.42923027586120,4.73189885892760,0.0177066426694276,0.00732772843893861,12.8822222315446,15.4064718404967,0.197005976771772,4.19674417093219,12.9887693292316,38.7327813504136,3518.11189029794,48.2658493803389,1103.32752934766,1103.32752934766, 3605.11052102869,2206.65505869532];
    lts=[0.836762943800000,0.812784400000000,0.642695991012746,0.571436581319117,0.510222126096502,0.497986641389845,0.467671770897164,0.272319659151717,0.211662726529420,0.436328560745959,0.403170791723092,0.420116152007239,0.465905241362617,0.398153739704899,0.681503737817459,0.522417789009810,0.526957674236890,0.459682558776388,0.459682558776388];
    TFs=[0,0,0.0281758333168280,0.0310417801731128,0.0235690610803534,2.42923027585465,4.73189885892584,0.0177066426687542,0.00732772847311748,12.8822222315728,15.4064718404961,0.197005976770967,4.19674417093155,12.9887693292300,38.7327813503963,3518.11189029794,48.2658493803235,1103.32752934766,1103.32752934766,3605.11052102866,2206.65505869532];
    lls=[0.467518730000000,0.547142770000000,0.546736270000000,0.247157270000000,0.245642710000000,0.161857680000000,0.161639640000000,0.0245711500000000,0.0351028600000000,0.0228158600000000,0.0376394700000000,0.0330560500000000,0.0324538600000000,0.0225872800000000,0.0233919900000000,0.00832470000000000,0.00964618000000000,0.0705744900000000,0.0659060000000000,0.0699516400000000,0.107368420000000,0.0181069900000000,0.0180238900000000,0.0438517900000000,0.0447735600000000,0.0442624600000000,0.0441998100000000,0.0199930200000000,0.0205583100000000,0.0210432200000000,0.0203915900000000,0.0572193400000000,0.0599016800000000,0.0167891900000000];
    LFs=[2623.10262075000,339.944717580000,315.759583920000,4.29055992000000,4.52297867000000,0,0,0,0,0,0,45.9935933200000,37.2825566000000,146.875179670000,132.693019260000,0,0,468.699923830000,155.835577280000,465.862399500000,1771.12319755000,0,0,217.638971890000,240.888345980000,124.726428150000,194.991983980000,270.810388070000,670.396774690000,0,0,452.591203300000,1157.65839819000,1322.35317923000, 655.704244350199,8.81353826326733];
elseif Horse==2
    lms=[0.0259200000000000,0.0259200000000000,0.0105300000000000,0.0105300000000000,0.0105300000000000,0.0220569130821887,0.0222137362956022,0.00607968726215461,0.00607804294781925,0.0336687559556604,0.00455004797489903,0.00451504786543466,0.00407807612252975,0.00415412998741008,0.243009739801958,0.399967061960979,0.169636424376018,0.388285137082911,0.388285137082911];
    MFs=[0,0,0,0,0,2.78395627840981,5.25091536403724,0.0141797371356382,0.00457966477874886,12.3311270524653,15.4064221779843,0.197005209835592,3.38021230891103,12.9887306001286,31.9361162282881,3193.92660052367,39.2652767654759,1510.86885760822,1510.86885760822,3265.12799351744,3021.73771521644];
    lts=[0.836978339900000,0.808990389800000,0.638147480000000,0.566894280000000,0.505681700000000,0.498616416717811,0.468291213504398,0.272181722637845,0.211524656952181,0.435615074144340,0.403170772225101,0.420116132434565,0.464997274077470,0.398153720212590,0.680803880298042,0.521510178239021,0.526274835723982,0.462461813117089,0.462461813117089];
    TFs=[0,0,0,0,0,2.78395627840701,5.25091536403519,0.0141797371349690,0.00457966478676555,12.3311270525029,15.4064221779837,0.197005209834785,3.38021230891091,12.9887306001271,31.9361162282673,3193.92660052367,39.2652767654603,1510.86885760822,1510.86885760822,3265.12799351740,3021.73771521644];
    lls=[0.467028490000000,0.552772670000000,0.552275400000000,0.250944490000000,0.249483510000000,0.165292850000000,0.165073550000000,0.0247405700000000,0.0344855000000000,0.0228364600000000,0.0372078200000000,0.0334088700000000,0.0328725600000000,0.0228012400000000,0.0235986500000000,0.00855737000000000,0.00995388000000000,0.0712152100000000,0.0665661300000000,0.0705943200000000,0.107250670000000,0.0182395100000000,0.0180317700000000,0.0429433300000000,0.0437954000000000,0.0435398200000000,0.0432628800000000,0.0193849100000000,0.0197563300000000,0.0216616600000000,0.0210292000000000,0.0556381900000000,0.0571390500000000,0.0163205600000000];
    LFs=[2491.76113305000,740.281684110000,700.018137260000,215.083967150000,226.557340110000,0,0,0,0,0,0,64.2893398000000,53.2936354800000,185.607048950000,168.180002150000,0,0,768.561874610000,237.242874470000,769.107291440000,1701.66282526000,0,0,37.2493890000000,42.7343749100000,20.7447656000000,33.7584654900000,0,4.20755189000000,0,0,2.81875505000000,25.3468891100000,45.0981273500000,1440.29717494030,441.641313309604];
elseif Horse==3
    lms=[0.0259200000000000,0.0259200000000000,0.0105393275162331,0.0105444337942194,0.0105457159747716,0.0220453896971313,0.0221970282474882,0.00607999784209142,0.00607827783965768,0.0337611908073692,0.00455004827690842,0.00451504809276065,0.00408119311849232,0.00415413029510094,0.244766576356628,0.401369767199698,0.171417567216173,0.385215416537772,0.385215416537772];
    MFs=[0,0,0.0205107962149909,0.0239266672446037,0.0179171146185587,2.60364978734090,4.98816755500818,0.0159944057656219,0.00595134308733607,12.6032741679417,15.4064718404967,0.197005976771772,3.77598632912843,12.9887693292316,44.9158210999826,3791.70811996986,56.5974971397973,1061.64876749393,1061.64876749393, 3893.22143820964,2123.29753498787];
    lts=[0.835227630000000,0.812735579900000,0.642156422483767,0.570898106205781,0.509684254025229,0.498301700302869,0.467981681752512,0.272254612157909,0.211597622160342,0.435969399192631,0.403170791723092,0.420116152007239,0.465449706881508,0.398153739704899,0.682096823643372,0.523157252900302,0.527543472783827,0.459376093462226,0.459376093462226];
    TFs=[0,0,0.0205107962143917,0.0239266672442054,0.0179171146182979,2.60364978733444,4.98816755500595,0.0159944057649977,0.00595134310677388,12.6032741679708,15.4064718404961,0.197005976770967,3.77598632912833,12.9887693292300,44.9158210999677,3791.70811996986,56.5974971397860,1061.64876749393,1061.64876749393,3893.22143820961,2123.29753498787];
    lls=[0.469465140000000,0.546630800000000,0.546119930000000,0.247648890000000,0.246141510000000,0.160749620000000,0.160532360000000,0.0245928100000000,0.0350421500000000,0.0228154100000000,0.0376029300000000,0.0330880300000000,0.0324938800000000,0.0226069700000000,0.0234110000000000,0.00834226000000000,0.00967284000000000,0.0706426700000000,0.0659758900000000,0.0700199300000000,0.106586470000000,0.0182159500000000,0.0180289600000000,0.0430993400000000,0.0439631900000000,0.0436641600000000,0.0434237800000000,0.0194883000000000,0.0198927000000000,0.0208314400000000,0.0201729800000000,0.0580794600000000,0.0613002600000000,0.0169525200000000];
    LFs=[3171.17500001000,309.588277420000,280.304838190000,11.7661327700000,12.3828439400000,0,0,0,0,0,0,47.6014989800000,38.7696440100000,150.386838750000,135.897529030000,0,0,498.586191910000,164.026734620000,496.011279690000,1323.32075207000,0,0,59.7812515300000,67.8781462000000,33.3117453200000,54.0238169100000,0,46.5088166900000,0,0,879.602838870000,1975.20331296000,1996.60534895000, 589.893080857525,24.1489765415842];
elseif Horse==4
    lms=[0.0259200000000000,0.0259200000000000,0.0105340836481208,0.0105350886713754,0.0105349485802965,0.0220383481379084,0.0221867516880677,0.00608018474689734,0.00607842667334394,0.0338203966005399,0.00455004827690842,0.00451504809276065,0.00408324903762971,0.00415413029510094,0.243597051111576,0.400427874710479,0.170235056769511,0.386178122581684,0.386178122581684];
    MFs=[0,0,0.000642466619896207,0.00266800856722003,0.00156782078336149,2.49350197023444,4.82658491188710,0.0170865925502080,0.00682067944570243,12.7773599757554,15.4064718404967,0.197005976771772,4.03692148736027,12.9887693292316,35.8293090170285,3383.19972849360,44.3958313851533,1193.83908368506,1193.83908368506,3463.42486889578,2387.67816737012];
    lts=[0.835156368800000,0.810698330000000,0.639564436351879,0.568310231328625,0.507097791419704,0.498104021862092,0.467787238311932,0.272296485253103,0.211639523326656,0.436194013399460,0.403170791723092,0.420116152007239,0.465735040962370,0.398153739704899,0.681211651288424,0.522044451989521,0.526671283830489,0.460332117418316,0.460332117418316];
    TFs=[0,0,0.000642466619891739,0.00266800856717236,0.00156782078333605,2.49350197022736,4.82658491188468,0.0170865925495276,0.00682067947488236,12.7773599757807,15.4064718404961,0.197005976770967,4.03692148735978,12.9887693292300,35.8293090170094,3383.19972849360,44.3958313851394,1193.83908368506,1193.83908368506, 3463.42486889575,2387.67816737012];
    lls=[0.467080030000000,0.548886990000000,0.548038670000000,0.249848630000000,0.248372540000000,0.162724780000000,0.162506710000000,0.0246911200000000,0.0347007400000000,0.0228244300000000,0.0373697000000000,0.0332868300000000,0.0327305800000000,0.0227273600000000,0.0235272800000000,0.00847137000000000,0.00984507000000000,0.0710077800000000,0.0663518800000000,0.0703861500000000,0.104151810000000,0.0186378000000000,0.0181460800000000,0.0405517500000000,0.0412328200000000,0.0416218500000000,0.0407958800000000,0.0178556500000000,0.0177391500000000,0.0211135700000000,0.0204641800000000,0.0584499700000000,0.0603780500000000,0.0167365000000000];
    LFs=[2505.44040064000,450.943371920000,395.494923790000,111.309179240000,117.183608970000,0,0,0,0,0,0,57.8515729500000,47.7225287500000,172.109982840000,155.776714250000,0,0,667.188238950000,209.885802840000,666.475653510000,231.417679730000,0,0,0,0,0,0,0,0,0,0,1082.79657189000,1426.71251566000,1121.15856695000, 846.438256224950,228.492784705050];
end
    
%Choose activation profile takeoff (leading (L) or trailing (R)) and
%landing (leading (L) or trailing (R))
    
if Q(i,1)=='T'
    if Q(i,2)=='L'
        act=[0.0975773889636608;0.107335127860027;0.0814266487213998;0.0706594885598924;0.0595558546433379;0.0541722745625841;0.0487886944818305;0.0434051144010767;0.0487886944818305;0.0434051144010767;0.0434051144010767;0.0380215343203231;0.0434051144010767;0.0434051144010767;0.0541722745625841;0.0649394347240915;0.0814266487213998;0.0921938088829072;0.0975773889636608;0.102960969044415;0.108681022880215;0.114064602960969;0.119448183041723;0.135598923283984;0.152086137281292;0.173620457604307;0.195491251682369;0.200874831763122;0.200874831763122;0.190107671601615;0.179340511440108;0.179340511440108;0.184724091520861;0.195491251682369;0.211978465679677;0.222745625841184;0.222745625841184;0.217362045760431;0.217362045760431;0.228129205921938;0.238896366083446;0.250000000000000;0.250000000000000;0.238896366083446;0.228129205921938;0.233512786002692;0.266150740242261;0.326043068640646;0.391318977119785;0.434724091520861;0.445491251682369;0.418236877523553;0.391318977119785;0.364064602960969;0.347577388963661;0.326043068640646;0.315275908479139;0.298788694481831;0.282637954239569;0.260767160161507;0.244616419919246;0.244616419919246;0.250000000000000;0.260767160161507;0.266150740242261;0.260767160161507;0.255383580080754;0.250000000000000;0.233512786002692;0.211978465679677;0.184724091520861;0.162853297442800;0.157469717362046;0.162853297442800;0.162853297442800;0.162853297442800;0.157469717362046;0.152086137281292;0.146702557200538;0.130215343203230;0.119448183041723;0.108681022880215;0.108681022880215;0.108681022880215;0.119448183041723;0.141318977119785;0.152086137281292;0.157469717362046;0.157469717362046;0.157469717362046;0.162853297442800;0.179340511440108;0.217362045760431;0.250000000000000;0.266150740242261;0.266150740242261;0.250000000000000;0.217362045760431;0.190107671601615;0.173620457604307;0.162853297442800];
    elseif Q(i,2)=='R'
        act=[0.0921938088829072;0.107335127860027;0.0975773889636608;0.114064602960969;0.132234185733513;0.141318977119785;0.135598923283984;0.124831763122476;0.110699865410498;0.119448183041723;0.130215343203230;0.130215343203230;0.114064602960969;0.108681022880215;0.0975773889636608;0.0921938088829072;0.0814266487213998;0.0820995962314939;0.0706594885598924;0.0595558546433379;0.0487886944818305;0.0487886944818305;0.0541722745625841;0.0649394347240915;0.0760430686406460;0.0868102288021534;0.0975773889636608;0.0975773889636608;0.0975773889636608;0.108681022880215;0.124831763122476;0.152086137281292;0.178331090174966;0.179340511440108;0.179340511440108;0.179340511440108;0.157469717362046;0.146702557200538;0.141318977119785;0.146702557200538;0.173620457604307;0.190107671601615;0.211978465679677;0.222745625841184;0.228129205921938;0.222745625841184;0.206258411843876;0.206258411843876;0.222745625841184;0.238896366083446;0.255383580080754;0.250000000000000;0.228129205921938;0.195491251682369;0.168236877523553;0.141318977119785;0.124831763122476;0.119448183041723;0.119448183041723;0.124831763122476;0.124831763122476;0.124831763122476;0.119448183041723;0.114064602960969;0.108681022880215;0.0921938088829072;0.0706594885598924;0.0541722745625841;0.0434051144010767;0.0380215343203231;0.0434051144010767;0.0487886944818305;0.0595558546433379;0.0706594885598924;0.0814266487213998;0.0706594885598924;0.0595558546433379;0.0434051144010767;0.0380215343203231;0.0323014804845222;0.0269179004037687;0.0269179004037687;0.0269179004037687;0.0269179004037687;0.0323014804845222;0.0541722745625841;0.0814266487213998;0.124831763122476;0.162853297442800;0.195491251682369;0.217362045760431;0.228129205921938;0.228129205921938;0.222745625841184;0.206258411843876;0.179340511440108;0.162853297442800;0.179340511440108;0.206258411843876;0.228129205921938;0.233512786002692];
    end
elseif Q(i,1)=='L'
    if Q(i,2)=='L'
        act=[0.173620457604307;0.173620457604307;0.135598923283984;0.0975773889636608;0.102960969044415;0.108681022880215;0.108681022880215;0.102960969044415;0.114064602960969;0.157469717362046;0.168236877523553;0.195491251682369;0.222745625841184;0.233512786002692;0.211978465679677;0.152086137281292;0.108681022880215;0.114064602960969;0.130215343203230;0.146702557200538;0.141318977119785;0.114064602960969;0.0649394347240915;0.0649394347240915;0.0868102288021534;0.0814266487213998;0.0760430686406460;0.0868102288021534;0.108681022880215;0.102960969044415;0.0706594885598924;0.0434051144010767;0.0380215343203231;0.0487886944818305;0.0649394347240915;0.0706594885598924;0.0649394347240915;0.0595558546433379;0.0706594885598924;0.0760430686406460;0.0541722745625841;0.0595558546433379;0.0595558546433379;0.0649394347240915;0.0706594885598924;0.0814266487213998;0.0541722745625841;0.0323014804845222;0.0269179004037687;0.0269179004037687;0.0215343203230148;0.0161507402422612;0.0215343203230148;0.0269179004037687;0.0380215343203231;0.0649394347240915;0.102960969044415;0.124831763122476;0.124831763122476;0.157469717362046;0.200874831763122;0.206258411843876;0.162853297442800;0.130215343203230;0.146702557200538;0.152086137281292;0.157469717362046;0.190107671601615;0.288021534320323;0.391318977119785;0.407469717362046;0.336810228802153;0.260767160161507;0.260767160161507;0.288021534320323;0.276917900403769;0.228129205921938;0.184724091520861;0.206258411843876;0.255383580080754;0.255383580080754;0.228129205921938;0.162853297442800;0.114064602960969;0.108681022880215;0.124831763122476;0.152086137281292;0.184724091520861;0.222745625841184;0.228129205921938;0.184724091520861;0.130215343203230;0.0975773889636608;0.0975773889636608;0.114064602960969;0.146702557200538;0.195491251682369;0.315275908479139;0.385935397039031;0.315275908479139;0.233512786002692];
    elseif Q(i,2)=='R'
        act=[0.233512786002692;0.228129205921938;0.173620457604307;0.0921938088829072;0.0760430686406460;0.0975773889636608;0.0975773889636608;0.0649394347240915;0.0487886944818305;0.0487886944818305;0.0487886944818305;0.0487886944818305;0.0541722745625841;0.0595558546433379;0.0487886944818305;0.0380215343203231;0.0269179004037687;0.0215343203230148;0.0269179004037687;0.0269179004037687;0.0215343203230148;0.0215343203230148;0.0161507402422612;0.0161507402422612;0.0161507402422612;0.0215343203230148;0.0161507402422612;0.0107671601615074;0.0107671601615074;0.0107671601615074;0.0269179004037687;0.0595558546433379;0.0814266487213998;0.0595558546433379;0.0380215343203231;0.0269179004037687;0.0380215343203231;0.0595558546433379;0.0975773889636608;0.114064602960969;0.0975773889636608;0.0595558546433379;0.0380215343203231;0.0380215343203231;0.0269179004037687;0.0161507402422612;0.0107671601615074;0.0107671601615074;0.0107671601615074;0.00538358008075383;0.00538358008075383;0.0107671601615074;0.0215343203230148;0.0269179004037687;0.0380215343203231;0.0380215343203231;0.0541722745625841;0.0541722745625841;0.0487886944818305;0.0434051144010767;0.0487886944818305;0.119448183041723;0.293405114401077;0.603297442799462;0.961978465679677;1;0.554172274562584;0.293405114401077;0.206258411843876;0.233512786002692;0.206258411843876;0.168236877523553;0.238896366083446;0.315275908479139;0.319986541049798;0.304172274562584;0.331426648721400;0.450874831763122;0.494616419919246;0.412853297442800;0.391318977119785;0.342193808882907;0.266150740242261;0.211978465679677;0.173620457604307;0.135598923283984;0.108681022880215;0.0649394347240915;0.0706594885598924;0.173620457604307;0.309555854643338;0.331426648721400;0.298788694481831;0.364064602960969;0.374831763122476;0.347577388963661;0.233512786002692;0.124831763122476;0.124831763122476;0.173620457604307;0.190107671601615];
    end
end
    
%Optimal length of muscle, maximum isometric force, slack length of tendon
 
lm0=[0.064, 0.064, 0.026, 0.026, 0.026, 0.054, 0.054, 0.015, 0.015, 0.073, 0.011, 0.011, 0.010, 0.010, 0.235, 0.382, 0.162, 0.371, 0.371];
F0=[557.4, 557.4, 225.9, 135.5, 90.4, 1902.4, 1902.4, 200.7, 200.7, 486.9, 4179.6, 85.3, 2921.6, 2921.6, 0.047, 0.885, 0.068, 0.5, 0.5];
lt0=[0.844, 0.814, 0.639, 0.567, 0.506, 0.489, 0.456, 0.271, 0.211, 0.403, 0.391, 0.410, 0.457, 0.385, 0.675, 0.506, 0.521, 0.446, 0.446];
ll0=[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.45104, 0.5375, 0.5375, 0.24633, 0.2448, 0.16598, 0.16576, 0.035, 0.044, 0.035, 0.044, 0.0312, 0.0305, 0.02136, 0.0222, 0.0086, 0.01, 0.0687, 0.0637, 0.0681, 0.1027, 0.0193, 0.0185, 0.0424, 0.0432, 0.0431, 0.0427, 0.0195, 0.0197, 0.0228, 0.0222, 0.05552, 0.05677, 0.01623];      
stancetime=P(i,1)/100;
 
%% 
 
k=1;
j=1;
%Calculate muscle/tendon lengths and forces for all generic muscles
for k=1:14
for j=1:101
    
%Solve including active muscle, passive muscle, and tendon forces
if E(j,k+1)>(lm0(k)+lt0(k))
options = optimoptions (@fsolve, 'MaxIterations', 100000000, 'MaxFunctionEvaluations', 1000000000)
x0=[0.405*lm0(k), lt0(k)];
 
x= fsolve(@activemuscle, x0, options);
 
lm(j,k)=real(x(1));
lt(j,k)=real(x(2));
 
%Solve including passive muscle, and tendon forces (active muscle not
%contributing because sarcomeres are too long)
    if lm(j,k)>(1.58*lm0(k)) && lt(j,k)>=lt0(k)
    
    options = optimoptions (@fsolve, 'MaxIterations', 100000000, 'MaxFunctionEvaluations', 1000000000)
    x0=[1.58*lm0(k), lt0(k)];
 
    x= fsolve(@passivemuscle, x0, options);
    lm(j,k)=real(x(1));
    lt(j,k)=real(x(2));
    
    vm(1,k)=0;
    if j>1
    vm(j,k)=((lm(j,k)-lm(j-1,k))/stancetime);
    end
 
        if vm(j,k)>=0
        vel(j,k)=(1.8-(0.026392/((vm(j,k)/(10*lm0(k)))+0.03299)));
        elseif (vm(j,k))<=(-10*lm0(k))
        vel(j,k)=0
        elseif vm(j,k)<0
        vel(j,k)=(((1+(vm(j,k)/(10*lm0(k))))/(1-(vm(j,k)/(0.25*10*lm0(k))))));
        end
 
        cond(j,k)=1;
        MuscleForce1(j,k)=(F0(k)*9.198*((x(1)/lm0(k))-1)^2.996); 
        MuscleForce2(j,k)=(F0(k)*9.198*((x(1)/lm0(k))-1)^2.996);
        TendonForce(j,k)=F0(k)*3.966*((lt(j,k)/lt0(k))-1)^2.012;
 
    
 
    %Solve including active muscle, and tendon forces (passive muscle is not contributing because less than optimal length)
    elseif lm(j,k)<lm0(k) && lt(j,k)>=lt0(k)
 
           
    options = optimoptions (@fsolve, 'MaxIterations', 100000000, 'MaxFunctionEvaluations', 1000000000)
    x0=[0.405*lm0(k), lt0(k)];
 
    x= fsolve(@activemuscle2, x0, options);
    lm(j,k)=real(x(1));
    lt(j,k)=real(x(2));
    
    %Active muscle too short
        if lm(j,k)<(0.405*lm0(k))
        lm(j,k)=E(j,k+1)-lt0(k);
        lt(j,k)=lt0(k);
        cond(j,k)=2;
        MuscleForce1(j,k)=0; 
        MuscleForce2(j,k)=0;
        TendonForce(j,k)=0;
         
    else
    
    vm(1,k)=0;
    if j>1
    vm(j,k)=((lm(j,k)-lm(j-1,k))/stancetime);
    end
 
        if vm(j,k)>=0
        vel(j,k)=(1.8-(0.026392/((vm(j,k)/(10*lm0(k)))+0.03299)));
        elseif (vm(j,k))<=(-10*lm0(k))
        vel(j,k)=0
        elseif vm(j,k)<0
        vel(j,k)=(((1+(vm(j,k)/(10*lm0(k))))/(1-(vm(j,k)/(0.25*10*lm0(k))))));
        end
 
        cond(j,k)=3;
        MuscleForce1(j,k)=F0(k).*act(j).*(-2.777.*(lm(j,k)/lm0(k)).^2+5.521.*(lm(j,k)./lm0(k))-1.781); 
        MuscleForce2(j,k)=F0(k).*act(j).*vel(j,k).*(-2.777.*(lm(j,k)/lm0(k)).^2+5.521.*(lm(j,k)./lm0(k))-1.781);
        TendonForce(j,k)=F0(k)*3.966*((lt(j,k)/lt0(k))-1)^2.012;
        
        end
    elseif lm(j,k)>lm0(k) && lt(j,k)<lt0(k)
        lm(j,k)=1.58*lm0(k);
        lt(j,k)=E(j,k+1)-lm(j,k);
        cond(j,k)=7;
        MuscleForce1=0;
        MuscleForce2=0;
        TendonForce=0;    
    else
        
    vm(1,k)=0;
    if j>1
    vm(j,k)=((lm(j,k)-lm(j-1,k))/stancetime);
    end
 
        if vm(j,k)>=0
        vel(j,k)=(1.8-(0.026392/((vm(j,k)/(10*lm0(k)))+0.03299)));
        elseif (vm(j,k))<=(-10*lm0(k))
        vel(j,k)=0
        elseif vm(j,k)<0
        vel(j,k)=(((1+(vm(j,k)/(10*lm0(k))))/(1-(vm(j,k)/(0.25*10*lm0(k))))));
        end
        cond(j,k)=4;
        MuscleForce1(j,k)=F0(k).*act(j).*(-2.777.*(lm(j,k)/lm0(k)).^2+5.521.*(lm(j,k)./lm0(k))-1.781)+(F0(k)*9.198*((lm(j,k)/lm0(k))-1)^2.996); 
        MuscleForce2(j,k)=F0(k).*act(j).*vel(j,k).*(-2.777.*(lm(j,k)/lm0(k)).^2+5.521.*(lm(j,k)./lm0(k))-1.781)+(F0(k)*9.198*((lm(j,k)/lm0(k))-1)^2.996);
        TendonForce(j,k)=F0(k)*3.966*((lt(j,k)/lt0(k))-1)^2.012;
    end      
 
 
else
 
lm(j,k)=0.405*lm0(k);
lt(j,k)=E(j,k+1)-lm(j,k);
TendonForceCheck(j,k)=lt(j,k)-lt0(k);
   if TendonForceCheck(j,k)>0
 
       options = optimoptions (@fsolve, 'MaxIterations', 100000000, 'MaxFunctionEvaluations', 1000000000)
        x0=[0.405*lm0(k), lt0(k)];
 
        x= fsolve(@activemuscle2, x0, options);
        lm(j,k)=real(x(1));
        lt(j,k)=real(x(2));
        
        vm(1,k)=0;
        if j>1
        vm(j,k)=((lm(j,k)-lm(j-1,k))/stancetime);
        end
 
        if vm(j,k)>=0
        vel(j,k)=(1.8-(0.026392/((vm(j,k)/(10*lm0(k)))+0.03299)));
        elseif (vm(j,k))<=(-10*lm0(k))
        vel(j,k)=0
        elseif vm(j,k)<0
        vel(j,k)=(((1+(vm(j,k)/(10*lm0(k))))/(1-(vm(j,k)/(0.25*10*lm0(k))))));
        end
        cond(j,k)=5;
        MuscleForce1(j,k)=F0(k).*act(j).*(-2.777.*(lm(j,k)/lm0(k)).^2+5.521.*(lm(j,k)./lm0(k))-1.781);
        MuscleForce2(j,k)=F0(k).*act(j).*vel(j,k).*(-2.777.*(lm(j,k)/lm0(k)).^2+5.521.*(lm(j,k)./lm0(k))-1.781);
        TendonForce(j,k)=F0(k)*3.966*((lt(j,k)/lt0(k))-1)^2.012;
   else
   cond(j,k)=6;    
   MuscleForce1(j,k)=0;
   MuscleForce2(j,k)=0;
   TendonForce(j,k)=0;
   end
end
    test(j,k)=E(j,k+1)-(lm(j,k)+lt(j,k));
end
PercentStance=0:1:100;
figure;
plot(PercentStance, MuscleForce1(:,k), PercentStance, MuscleForce2(:,k), PercentStance, TendonForce(:,k));
end
%% 
%Calculate DDF muscle/tendon lengths and forces
for k=15:17
for j=1:101
    
%Solve including active muscle, passive muscle, and tendon forces
if E(j,k+1)>(lm0(k)+lt0(k))
options = optimoptions (@fsolve, 'MaxIterations', 100000, 'MaxFunctionEvaluations', 100000)
x0=[lm0(k), lt0(k)];
 
x= fsolve(@DDFactivemuscle, x0, options);
 
lm(j,k)=real(x(1));
lt(j,k)=real(x(2));
 
 
    %Solve including active muscle, and tendon forces (passive muscle is not contributing because less than optimal length)
    if lm(j,k)<lm0(k) && lt(j,k)>=lt0(k)
 
           
    options = optimoptions (@lsqnonlin, 'MaxIterations', 100000000, 'MaxFunctionEvaluations', 1000000000)
    x0=[0.74117*lm0(k), lt0(k)];
    lb=[0.74117*lm0(k), lt0(k)];
    ub=[1.32941*lm0(k), (E(j,k+1)-0.74117*lm0(k))];
 
    x= lsqnonlin(@DDFactivemuscle2, x0, lb,ub, options);
    lm(j,k)=real(x(1));
    lt(j,k)=real(x(2));
    
    vm(1,k)=0;
    if j>1
    vm(j,k)=((lm(j,k)-lm(j-1,k))/stancetime);
    end
 
        if vm(j,k)>=0
        vel(j,k)=(1.8-(0.026392/((vm(j,k)/(3.2*lm0(k)))+0.03299)));
        elseif (vm(j,k))<=(-3.2*lm0(k))
        vel(j,k)=0
        elseif vm(j,k)<0
        vel(j,k)=(((1+(vm(j,k)/(3.2*lm0(k))))/(1-(vm(j,k)/(0.25*3.2*lm0(k))))));
        end
 
        cond(j,k)=3;
        MuscleForce1(j,k)=F0(k)*1577.*act(j).*exp(-(((lm(j,k)/lm0(k))-0.9851)/0.06765)^2); 
        MuscleForce2(j,k)=F0(k)*1577.*act(j).*vel(j,k).*exp(-(((lm(j,k)/lm0(k))-0.9851)/0.06765)^2);
        TendonForce(j,k)=F0(k).*34.145*(1000*(lt(j,k)-lt0(k)))^1.7;
        
    elseif lm(j,k)>lm0(k) && lt(j,k)<lt0(k)
        lm(j,k)=1.32941*lm0(k);
        lt(j,k)=E(j,k+1)-lm(j,k);
        cond(j,k)=7;
        MuscleForce1=0;
        MuscleForce2=0;
        TendonForce=0;
        
        
    else
        
    vm(1,k)=0;
    if j>1
    vm(j,k)=((lm(j,k)-lm(j-1,k))/stancetime);
    end
 
        if vm(j,k)>=0
        vel(j,k)=(1.8-(0.026392/((vm(j,k)/(3.2*lm0(k)))+0.03299)));
        elseif (vm(j,k))<=(-3.2*lm0(k))
        vel(j,k)=0
        elseif vm(j,k)<0
        vel(j,k)=(((1+(vm(j,k)/(3.2*lm0(k))))/(1-(vm(j,k)/(0.25*3.2*lm0(k))))));
        end
        
        cond(j,k)=4;
        MuscleForce1(j,k)=F0(k).*1577.*act(j).*exp(-(((lm(j,k)/lm0(k))-0.9851)/0.06765)^2)+(F0(k)*3.395*(1000*(lm(j,k)-lm0(k)))^2.4); 
        MuscleForce2(j,k)=F0(k).*1577.*act(j).*vel(j,k).*exp(-(((lm(j,k)/lm0(k))-0.9851)/0.06765)^2)+(F0(k)*3.395*(1000*(lm(j,k)-lm0(k)))^2.4);
        TendonForce(j,k)=F0(k).*34.145*(1000*(lt(j,k)-lt0(k)))^1.7;
    end      
 
 
else
 
lm(j,k)=0.74117*lm0(k);
lt(j,k)=E(j,k+1)-lm(j,k);
TendonForceCheck(j,k)=lt(j,k)-lt0(k);
   if TendonForceCheck(j,k)>0
 
       options = optimoptions (@lsqnonlin, 'MaxIterations', 100000000, 'MaxFunctionEvaluations', 1000000000)
        x0=[0.74117*lm0(k), lt0(k)];
        lb=[0.74117*lm0(k), lt0(k)];
        ub=[1.32941*lm0(k), (E(j,k+1)-0.74117*lm0(k))];
 
        x= lsqnonlin(@DDFactivemuscle2, x0, lb, ub, options);
        lm(j,k)=real(x(1));
        lt(j,k)=real(x(2));
        
        vm(1,k)=0;
        if j>1
        vm(j,k)=((lm(j,k)-lm(j-1,k))/stancetime);
        end
 
        if vm(j,k)>=0
        vel(j,k)=(1.8-(0.026392/((vm(j,k)/(3.2*lm0(k)))+0.03299)));
        elseif (vm(j,k))<=(-3.2*lm0(k))
        vel(j,k)=0
        elseif vm(j,k)<0
        vel(j,k)=(((1+(vm(j,k)/(3.2*lm0(k))))/(1-(vm(j,k)/(0.25*3.2*lm0(k))))));
        end
        cond(j,k)=5;
        MuscleForce1(j,k)=F0(k).*1577.*act(j).*exp(-(((lm(j,k)/lm0(k))-0.9851)/0.06765)^2);
        MuscleForce2(j,k)=F0(k).*1577.*act(j).*vel(j,k).*exp(-(((lm(j,k)/lm0(k))-0.9851)/0.06765)^2);
        TendonForce(j,k)=F0(k).*34.145*(1000*(lt(j,k)-lt0(k)))^1.7;
   else
   cond(j,k)=6;    
   MuscleForce1(j,k)=0;
   MuscleForce2(j,k)=0;
   TendonForce(j,k)=0;
   end
end
    test(j,k)=E(j,k+1)-(lm(j,k)+lt(j,k));
end
PercentStance=0:1:100;
figure;
plot(PercentStance, MuscleForce1(:,k), PercentStance, MuscleForce2(:,k), PercentStance, TendonForce(:,k));
end
%% 
%Calculate SDF muscle/tendon lengths and forces
for k=18:19
for j=1:101
    
%Solve including active muscle, passive muscle, and tendon forces
if E(j,k+1)>(lm0(k)+lt0(k))
options = optimoptions (@fsolve, 'MaxIterations', 100000, 'MaxFunctionEvaluations', 100000)
x0=[lm0(k), lt0(k)];
 
x= fsolve(@SDFactivemuscle, x0, options);
 
lm(j,k)=real(x(1));
lt(j,k)=real(x(2));
 
 
    %Solve including active muscle, and tendon forces (passive muscle is not contributing because less than optimal length)
    if lm(j,k)<lm0(k) && lt(j,k)>=lt0(k)
 
           
    options = optimoptions (@lsqnonlin, 'MaxIterations', 100000000, 'MaxFunctionEvaluations', 1000000000)
    x0=[0.9*lm0(k), lt0(k)];
    lb=[0.9*lm0(k), lt0(k)];
    ub=[1.17486*lm0(k), (E(j,k+1)-0.9*lm0(k))];
 
    x= lsqnonlin(@SDFactivemuscle2, x0, lb, ub, options);
    lm(j,k)=real(x(1));
    lt(j,k)=real(x(2));
    
    vm(1,k)=0;
    if j>1
    vm(j,k)=((lm(j,k)-lm(j-1,k))/stancetime);
    end
 
        if vm(j,k)>=0
        vel(j,k)=(1.8-(0.026392/((vm(j,k)/(1.6*lm0(k)))+0.03299)));
        elseif (vm(j,k))<=(-1.6*lm0(k))
        vel(j,k)=0
        elseif vm(j,k)<0
        vel(j,k)=(((1+(vm(j,k)/(1.6*lm0(k))))/(1-(vm(j,k)/(0.25*1.6*lm0(k))))));
        end
 
        cond(j,k)=3;
        MuscleForce1(j,k)=F0(k)*716.*act(j).*exp(-(((lm(j,k)/lm0(k))-1.003)/0.0522)^2); 
        MuscleForce2(j,k)=F0(k)*716.*act(j).*vel(j,k).*exp(-(((lm(j,k)/lm0(k))-1.003)/0.0522)^2);
        TendonForce(j,k)=F0(k).*25.837*(1000*(lt(j,k)-lt0(k)))^1.7;
        
    elseif lm(j,k)>lm0(k) && lt(j,k)<lt0(k)
        lm(j,k)=1.17486*lm0(k);
        lt(j,k)=E(j,k+1)-lm(j,k);
        cond(j,k)=7;
        MuscleForce1=0;
        MuscleForce2=0;
        TendonForce=0;
        
        
    else
        
    vm(1,k)=0;
    if j>1
    vm(j,k)=((lm(j,k)-lm(j-1,k))/stancetime);
    end
 
        if vm(j,k)>=0
        vel(j,k)=(1.8-(0.026392/((vm(j,k)/(1.6*lm0(k)))+0.03299)));
        elseif (vm(j,k))<=(-1.6*lm0(k))
        vel(j,k)=0
        elseif vm(j,k)<0
        vel(j,k)=(((1+(vm(j,k)/(1.6*lm0(k))))/(1-(vm(j,k)/(0.25*1.6*lm0(k))))));
        end
        
        cond(j,k)=4;
        MuscleForce1(j,k)=F0(k).*716.*act(j).*exp(-(((lm(j,k)/lm0(k))-1.003)/0.0522)^2)+(F0(k)*13.149*(1000*(lm(j,k)-lm0(k)))^1.9); 
        MuscleForce2(j,k)=F0(k).*716.*act(j).*vel(j,k).*exp(-(((lm(j,k)/lm0(k))-1.003)/0.0522)^2)+(F0(k)*13.149*(1000*(lm(j,k)-lm0(k)))^1.9);
        TendonForce(j,k)=F0(k).*25.837*(1000*(lt(j,k)-lt0(k)))^1.7;
    end      
 
 
else
 
lm(j,k)=0.9*lm0(k);
lt(j,k)=E(j,k+1)-lm(j,k);
TendonForceCheck(j,k)=lt(j,k)-lt0(k);
   if TendonForceCheck(j,k)>0
 
       options = optimoptions (@lsqnonlin, 'MaxIterations', 100000000, 'MaxFunctionEvaluations', 1000000000)
        x0=[0.9*lm0(k), lt0(k)];
        lb=[0.9*lm0(k), lt0(k)];
        ub=[1.14117*lm0(k), (E(j,k+1)-0.8*lm0(k))];
 
        x= lsqnonlin(@SDFactivemuscle2, x0, lb, ub, options);
        lm(j,k)=real(x(1));
        lt(j,k)=real(x(2));
        
        vm(1,k)=0;
        if j>1
        vm(j,k)=((lm(j,k)-lm(j-1,k))/stancetime);
        end
 
        if vm(j,k)>=0
        vel(j,k)=(1.8-(0.026392/((vm(j,k)/(1.6*lm0(k)))+0.03299)));
        elseif (vm(j,k))<=(-1.6*lm0(k))
        vel(j,k)=0
        elseif vm(j,k)<0
        vel(j,k)=(((1+(vm(j,k)/(1.6*lm0(k))))/(1-(vm(j,k)/(0.25*1.6*lm0(k))))));
        end
        cond(j,k)=5;
        MuscleForce1(j,k)=F0(k).*716.*act(j).*exp(-(((lm(j,k)/lm0(k))-1.003)/0.0522)^2);
        MuscleForce2(j,k)=F0(k).*716.*act(j).*vel(j,k).*exp(-(((lm(j,k)/lm0(k))-1.003)/0.0522)^2);
        TendonForce(j,k)=F0(k).*25.837*(1000*(lt(j,k)-lt0(k)))^1.7;
   else
   cond(j,k)=6;    
   MuscleForce1(j,k)=0;
   MuscleForce2(j,k)=0;
   TendonForce(j,k)=0;
   end
end
    test(j,k)=E(j,k+1)-(lm(j,k)+lt(j,k));
end
PercentStance=0:1:100;
figure;
plot(PercentStance, MuscleForce1(:,k), PercentStance, MuscleForce2(:,k), PercentStance, TendonForce(:,k));
end
 
%% 
%Data Export
if Save==1
    for q=1:19
    Table1(:,q)=table(lm(:,q));
    Table2(:,q)=table(lt(:,q));
    Table3(:,q)=table(MuscleForce1(:,q));
    Table4(:,q)=table(MuscleForce2(:,q));
    Table5(:,q)=table(TendonForce(:,q));
    
    end
  
    Table1.Properties.VariableNames = {'CDE_p3' 'CDE_p2' 'LDE_hi' 'LDE_mid' 'LDE_lo' 'ECR_c' 'ECR_e' 'eco_hro' 'eco_lro' 'FCR' 'FCU_h' 'FCU_u' 'UL_mc3' 'UL_ac' 'DDF_u' 'DDF_h' 'DDF_r' 'SDF_lat' 'SDF_med'};
    Table2.Properties.VariableNames = {'CDE_p3' 'CDE_p2' 'LDE_hi' 'LDE_mid' 'LDE_lo' 'ECR_c' 'ECR_e' 'eco_hro' 'eco_lro' 'FCR' 'FCU_h' 'FCU_u' 'UL_mc3' 'UL_ac' 'DDF_u' 'DDF_h' 'DDF_r' 'SDF_lat' 'SDF_med'};
    Table3.Properties.VariableNames = {'CDE_p3' 'CDE_p2' 'LDE_hi' 'LDE_mid' 'LDE_lo' 'ECR_c' 'ECR_e' 'eco_hro' 'eco_lro' 'FCR' 'FCU_h' 'FCU_u' 'UL_mc3' 'UL_ac' 'DDF_u' 'DDF_h' 'DDF_r' 'SDF_lat' 'SDF_med'};
    Table4.Properties.VariableNames = {'CDE_p3' 'CDE_p2' 'LDE_hi' 'LDE_mid' 'LDE_lo' 'ECR_c' 'ECR_e' 'eco_hro' 'eco_lro' 'FCR' 'FCU_h' 'FCU_u' 'UL_mc3' 'UL_ac' 'DDF_u' 'DDF_h' 'DDF_r' 'SDF_lat' 'SDF_med'};
    Table5.Properties.VariableNames = {'CDE_p3' 'CDE_p2' 'LDE_hi' 'LDE_mid' 'LDE_lo' 'ECR_c' 'ECR_e' 'eco_hro' 'eco_lro' 'FCR' 'FCU_h' 'FCU_u' 'UL_mc3' 'UL_ac' 'DDF_u' 'DDF_h' 'DDF_r' 'SDF_lat' 'SDF_med'};
    
    ExcelOutputName=(strcat('Muscle_Tendon_Data_Export', char(trialheaders(i)),'.xlsx'));
    writetable(Table1, ExcelOutputName, 'Sheet', 'MuscleLength');
    writetable(Table2, ExcelOutputName, 'Sheet', 'TendonLength');
    writetable(Table3, ExcelOutputName, 'Sheet', 'MuscleForcewoVelocity');
    writetable(Table4, ExcelOutputName, 'Sheet', 'MuscleForcewVelocity');
    writetable(Table5, ExcelOutputName, 'Sheet', 'TendonForce');
end
%% 
%Data Processing
 
%Muscle, tendon, and ligament lengths and strains
for y=1:19;
        [MaxML(i,y), MaxIndML(i,y)]=max(lm(:,y));
        MaxPercentStanceML(i,y)=(MaxIndML(i,y)-1);
        MaxSlackStrainML(i,y)=(MaxML(i,y)-lm0(y))/lm0(y);
        MaxStandStrainML(i,y)=(MaxML(i,y)-lms(y))/lms(y);
        [MinML(i,y), MinIndML(i,y)]=min(lm(:,y));
        MinPercentStanceML(i,y)=(MinIndML(i,y)-1);
        MinSlackStrainML(i,y)=(MinML(i,y)-lm0(y))/lm0(y);
        MinStandStrainML(i,y)=(MinML(i,y)-lms(y))/lms(y);
        AvgML(i,y)=mean(lm(:,y));
        AvgSlackStrainML(i,y)=(AvgML(i,y)-lm0(y))/lm0(y);
        AvgStandStrainML(i,y)=(AvgML(i,y)-lms(y))/lms(y);
 
        MVel(:,y)=[0;diff(lm(:,y))/stancetime];
        
        [VelMaxM(i,y), VelMaxIndM(i,y)]=max(MVel(:,y));
        VelMaxPercentStanceM(i,y)=(VelMaxIndM(i,y)-1);
        [VelMinM(i,y), VelMinIndM(i,y)]=min(MVel(:,y));
        VelMinPercentStanceM(i,y)=(VelMinIndM(i,y)-1);
        VelAvgM(i,y)=mean(MVel(:,y));
        
        [MaxTL(i,y), MaxIndTL(i,y)]=max(lt(:,y));
        MaxPercentStanceTL(i,y)=(MaxIndTL(i,y)-1);
        MaxSlackStrainTL(i,y)=(MaxTL(i,y)-lt0(y))/lt0(y);
        MaxStandStrainTL(i,y)=(MaxTL(i,y)-lts(y))/lts(y);
        [MinTL(i,y), MinIndTL(i,y)]=min(lt(:,y));
        MinPercentStanceTL(i,y)=(MinIndTL(i,y)-1);
        MinSlackStrainTL(i,y)=(MinTL(i,y)-lt0(y))/lt0(y);
        MinStandStrainTL(i,y)=(MinTL(i,y)-lts(y))/lts(y);
        AvgTL(i,y)=mean(lt(:,y));
        AvgSlackStrainTL(i,y)=(AvgTL(i,y)-lt0(y))/lt0(y);
        AvgStandStrainTL(i,y)=(AvgTL(i,y)-lts(y))/lts(y);
 
        TVel(:,y)=[0;diff(lt(:,y))/stancetime];
        
        [VelMaxT(i,y), VelMaxIndT(i,y)]=max(TVel(:,y));
        VelMaxPercentStanceT(i,y)=(VelMaxIndT(i,y)-1);
        [VelMinT(i,y), VelMinIndT(i,y)]=min(TVel(:,y));
        VelMinPercentStanceT(i,y)=(VelMinIndT(i,y)-1);
        VelAvgT(i,y)=mean(TVel(:,y));
 
end
for y=20:53
        [MaxLL(i,y-19), MaxIndLL(i,y-19)]=max(E(:,y+1));
        MaxPercentStanceLL(i,y-19)=(MaxIndLL(i,y-19)-1);
        MaxSlackStrainLL(i,y-19)=(MaxLL(i,y-19)-ll0(y))/ll0(y);
        MaxStandStrainLL(i,y-19)=(MaxLL(i,y-19)-lls(y-19))/lls(y-19);
        [MinLL(i,y-19), MinIndLL(i,y-19)]=min(E(:,y+1));
        MinPercentStanceLL(i,y-19)=(MinIndLL(i,y-19)-1);
        MinSlackStrainLL(i,y-19)=(MinLL(i,y-19)-ll0(y))/ll0(y);
        MinStandStrainLL(i,y-19)=(MinLL(i,y-19)-lls(y-19))/lls(y-19);
        AvgLL(i,y-19)=mean(E(:,y+1));
        AvgSlackStrainLL(i,y-19)=(AvgLL(i,y-19)-ll0(y))/ll0(y);
        AvgStandStrainLL(i,y-19)=(AvgLL(i,y-19)-lls(y-19))/lls(y-19);
 
        LVel(:,y-19)=[0;diff(E(:,y+1))/stancetime];
        
        [VelMaxL(i,y-19), VelMaxIndL(i,y-19)]=max(LVel(:,y-19));
        VelMaxPercentStanceL(i,y-19)=(VelMaxIndL(i,y-19)-1);
        [VelMinL(i,y-19), VelMinIndL(i,y-19)]=min(LVel(:,y-19));
        VelMinPercentStanceL(i,y-19)=(VelMinIndL(i,y-19)-1);
        VelAvgL(i,y-19)=mean(LVel(:,y-19));
end
 
%Combined DDF
MuscleForce1(:,20)=MuscleForce1(:,15)+MuscleForce1(:,16)+MuscleForce1(:,17);
MuscleForce2(:,20)=MuscleForce2(:,15)+MuscleForce2(:,16)+MuscleForce2(:,17);
%Combined SDF
MuscleForce1(:,21)=MuscleForce1(:,18)+MuscleForce1(:,19);
MuscleForce2(:,21)=MuscleForce2(:,18)+MuscleForce2(:,19);
 
TendonForce(:,20)=TendonForce(:,15)+TendonForce(:,16)+TendonForce(:,17);
TendonForce(:,21)=TendonForce(:,18)+TendonForce(:,19);
 
%Muscle, tendon, and ligament forces
for y=1:21;
        [MaxMF(i,y), MaxIndMF(i,y)]=max(MuscleForce1(:,y));
        MaxPercentStanceMF(i,y)=(MaxIndMF(i,y)-1);
        MaxForceNormM(i,y)=(MaxMF(i,y)/MFs(y));
        AvgMF(i,y)=mean(MuscleForce1(:,y));
        AvgForceNormM(i,y)=(AvgMF(i,y)/MFs(y));
        MImpulse(i,y)=trapz(MuscleForce1(:,y))*(stancetime);
        
        [MaxTF(i,y), MaxIndTF(i,y)]=max(TendonForce(:,y));
        MaxPercentStanceTF(i,y)=(MaxIndTF(i,y)-1);
        MaxForceNormT(i,y)=(MaxTF(i,y)/TFs(y));
        AvgTF(i,y)=mean(TendonForce(:,y));
        AvgForceNormT(i,y)=(AvgTF(i,y)/TFs(y));
        TImpulse(i,y)=trapz(TendonForce(:,y))*(stancetime);
 
end
%Combined SDF Check Ligament
H(:,55)=H(:,22)+H(:,23);
%Combined Suspensory Ligament
H(:,56)=H(:,24)+H(:,25);
for y=20:55
        [MaxLF(i,y-19), MaxIndLF(i,y-19)]=max(H(:,y+1));
        MaxPercentStanceLF(i,y-19)=(MaxIndLF(i,y-19)-1);
        MaxForceNormL(i,y-19)=(MaxLF(i,y-19)/LFs(y-19));
        AvgLF(i,y-19)=mean(H(:,y+1));
        AvgForceNormL(i,y-19)=(AvgLF(i,y-19)/LFs(y-19));
        LImpulse(i,y-19)=trapz(H(:,y+1))*(stancetime);
end
 
    figure;
    plot(time, MuscleForce1(:,20),time, MuscleForce2(:,20),time, TendonForce(:,20));
    title('DDF Force');
    legend('Muscle Force', 'Muscle Force w Velocity Multiplier', 'TendonForce');
    if Save==1
        savefig(strcat(trialheaders{i},'DDFForces.fig'));
    end
    
    figure;
    plot(time, MuscleForce1(:,21),time, MuscleForce2(:,21),time, TendonForce(:,21));
    title('SDF Force');
    legend('Muscle Force', 'Muscle Force w Velocity Multiplier', 'TendonForce');
    if Save==1
        savefig(strcat(trialheaders{i},'SDFForces.fig'));
    end
    
    figure;
    plot(time, H(:,21));
    title('ICL Force');
    if Save==1
        savefig(strcat(trialheaders{i},'ICLForce.fig'));
    end
    
    figure;
    plot(time, H(:,55));
    title('SCL Force');
    if Save==1
        savefig(strcat(trialheaders{i},'SCLForce.fig'));
    end
    
    figure;
    plot(time, H(:,56));
    title('SUSP Force');
    if Save==1
        savefig(strcat(trialheaders{i},'SUSPForce.fig'));
    end
 
%%
%Output Data Processing Results
 
Table6(i,:)=table(trialheaders(i), MaxML(i,:), MaxPercentStanceML(i,:), MaxSlackStrainML(i,:), MinML(i,:), MinPercentStanceML(i,:), MinSlackStrainML(i,:), AvgML(i,:), AvgSlackStrainML(i,:), VelMaxM(i,:), VelMaxPercentStanceM(i,:), VelMinM(i,:), VelMinPercentStanceM(i,:), VelAvgM(i,:), MaxMF(i,:), MaxPercentStanceMF(i,:), AvgMF(i,:), MImpulse(i,:), MaxStandStrainML(i,:), MinStandStrainML(i,:), AvgStandStrainML(i,:), MaxForceNormM(i,:), AvgForceNormM(i,:));
    Table6.Properties.VariableNames = {'TrialName' 'MaxML' 'MaxMLPercentStance' 'MaxSlackStrainML' 'MinML' 'MinMLPercentStance' 'MinSlackStrainML' 'AvgML' 'AvgSlackStrainML' 'VelMaxM' 'VelMaxPercentStanceM' 'VelMinM' 'VelMinPercentStanceM' 'VelAvgM' 'MaxMF' 'MaxPercentStanceMF' 'AvgMF' 'MImpulse' 'MaxStandStrainML' 'MinStandStrainML' 'AvgStandStrainML' 'MaxForceNormM' 'AvgForceNormM'};
Table7(i,:)=table(trialheaders(i), MaxTL(i,:), MaxPercentStanceTL(i,:), MaxSlackStrainTL(i,:), MinTL(i,:), MinPercentStanceTL(i,:), MinSlackStrainTL(i,:), AvgTL(i,:), AvgSlackStrainTL(i,:), VelMaxT(i,:), VelMaxPercentStanceT(i,:), VelMinT(i,:), VelMinPercentStanceT(i,:), VelAvgT(i,:), MaxTF(i,:), MaxPercentStanceTF(i,:), AvgTF(i,:), TImpulse(i,:), MaxStandStrainML(i,:), MinStandStrainML(i,:), AvgStandStrainML(i,:), MaxForceNormM(i,:), AvgForceNormM(i,:));
    Table7.Properties.VariableNames = {'TrialName' 'MaxTL' 'MaxTLPercentStance' 'MaxSlackStrainTL' 'MinTL' 'MinTLPercentStance' 'MinSlackStrainTL' 'AvgTL' 'AvgSlackStrainTL' 'VelMaxT' 'VelMaxPercentStanceT' 'VelMinT' 'VelMinPercentStanceT' 'VelAvgT' 'MaxTF' 'MaxPercentStanceTF' 'AvgTF' 'TImpulse' 'MaxStandStrainTL' 'MinStandStrainTL' 'AvgStandStrainTL' 'MaxForceNormT' 'AvgForceNormT'};    
Table8(i,:)=table(trialheaders(i), MaxLL(i,:), MaxPercentStanceLL(i,:), MaxSlackStrainLL(i,:), MinLL(i,:), MinPercentStanceLL(i,:), MinSlackStrainLL(i,:), AvgLL(i,:), AvgSlackStrainLL(i,:), VelMaxL(i,:), VelMaxPercentStanceL(i,:), VelMinL(i,:), VelMinPercentStanceL(i,:), VelAvgL(i,:), MaxLF(i,:), MaxPercentStanceLF(i,:), AvgLF(i,:), LImpulse(i,:), MaxStandStrainLL(i,:), MinStandStrainLL(i,:), AvgStandStrainLL(i,:), MaxForceNormL(i,:), AvgForceNormL(i,:));
    Table8.Properties.VariableNames = {'TrialName' 'MaxLL' 'MaxLLPercentStance' 'MaxSlackStrainLL' 'MinLL' 'MinLLPercentStance' 'MinSlackStrainLL' 'AvgLL' 'AvgSlackStrainLL' 'VelMaxL' 'VelMaxPercentStanceL' 'VelMinL' 'VelMinPercentStanceL' 'VelAvgL' 'MaxLF' 'MaxPercentStanceLF' 'AvgLF' 'LImpulse' 'MaxStandStrainLL' 'MinStandStrainLL' 'AvgStandStrainLL' 'MaxForceNormL' 'AvgForceNormL'};    
 
 
    
end
 
    if Save==1
  
    ExcelOutputName=(strcat('MTL_DataProcessing', char(trialheaders(i)),'.xlsx'));
    writetable(Table6, ExcelOutputName, 'Sheet', 'MuscleProperties');
    writetable(Table7, ExcelOutputName, 'Sheet', 'TendonProperties');
    writetable(Table8, ExcelOutputName, 'Sheet', 'LigamentProperties');
    end
 
 
 
function F = activemuscle(x)
global E j k act lm0 F0 lt0
 
 
F(1) = x(1) + x(2) - E(j,k+1);
F(2) = (F0(k)*act(j)*(-2.777*(x(1)/lm0(k))^2+5.521*(x(1)/lm0(k))-1.781))+(F0(k)*9.198*((x(1)/lm0(k))-1)^2.996) - (F0(k)*3.966*((x(2)/lt0(k))-1)^2.012);
end
 
function F2 = activemuscle2(x)
global E j k act lm0 F0 lt0
 
 
F2(1) = x(1) + x(2) - E(j,k+1);
F2(2) = F0(k)*act(j)*(-2.777*(x(1)/lm0(k))^2+5.521*(x(1)/lm0(k))-1.781)-(F0(k)*3.966*((x(2)/lt0(k))-1)^2.012);    
end
 
function F3 = passivemuscle(x)
global E j k act lm0 F0 lt0
 
 
F3(1) = x(1) + x(2) - E(j,k+1);
F3(2) = (F0(k)*9.198*((x(1)/lm0(k))-1)^2.996) - (F0(k)*3.966*((x(2)/lt0(k))-1)^2.012);
end
 
function F4 = DDFactivemuscle(x)
global E j k act lm0 F0 lt0
 
 
F4(1) = x(1) + x(2) - E(j,k+1);
F4(2) = F0(k)*1577*act(j)*exp(-(((x(1)/lm0(k))-0.9851)/0.06765)^2)+(F0(k)*(3.395*(1000*(x(1)-lm0(k)))^2.4)) - (F0(k)*(34.145*(1000*(x(2)-lt0(k)))^1.7));
end
 
function F5 = DDFactivemuscle2(x)
global E j k act lm0 F0 lt0
 
 
F5(1) = x(1) + x(2) - E(j,k+1);
F5(2) = F0(k)*1577*act(j).*exp(-(((x(1)/lm0(k))-0.9851)/0.06765)^2)-(F0(k)*(34.145*(1000*(x(2))-lt0(k))^1.7));    
end
 
function F6 = SDFactivemuscle(x)
global E j k act lm0 F0 lt0
 
 
F6(1) = x(1) + x(2) - E(j,k+1);
F6(2) = F0(k)*716*act(j)*exp(-(((x(1)/lm0(k))-1.003)/0.0522)^2)+(F0(k)*(13.149*(1000*(x(1)-lm0(k)))^1.9)) - (F0(k)*(25.837*(1000*(x(2)-lt0(k)))^1.7));
end
 
function F7 = SDFactivemuscle2(x)
global E j k act lm0 F0 lt0
 
 
F7(1) = x(1) + x(2) - E(j,k+1);
F7(2) = F0(k)*716*act(j).*exp(-(((x(1)/lm0(k))-1.003)/0.0522)^2)-(F0(k)*(25.837*(1000*(x(2))-lt0(k))^1.7));    
end
